apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "com.glia.exampleapp"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
        }
    }

    File propsFile = project.rootProject.file('local.properties')
    if (propsFile.exists()) {
        Properties p = new Properties()
        new FileInputStream(propsFile).withCloseable { is -> p.load(is) }
        p.each { name, value -> ext[name] = value }
    }

    initEnvProperty('GLIA_API_KEY_SECRET')
    initEnvProperty('GLIA_API_KEY_ID')
    initEnvProperty('GLIA_SITE_ID')
    initEnvProperty('GLIA_QUEUE_ID')
    initEnvProperty('FIREBASE_PROJECT_ID')
    initEnvProperty('FIREBASE_API_KEY')
    initEnvProperty('FIREBASE_APP_ID')
    initEnvProperty('FIREBASE_APP_ID_DEBUG')
    initEnvProperty('FIREBASE_APP_ID_MASTER')

    buildTypes {
        all {
            resValue("string", "site_id", GLIA_SITE_ID)
            resValue("string", "glia_api_key_id", GLIA_API_KEY_ID)
            resValue("string", "glia_api_key_secret", GLIA_API_KEY_SECRET)
            resValue("string", "glia_queue_id", GLIA_QUEUE_ID)
            resValue("string", "firebase_proj_id", FIREBASE_PROJECT_ID)
            resValue("string", "firebase_api_key", FIREBASE_API_KEY)
        }
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            resValue("string", "firebase_app_id", FIREBASE_APP_ID_DEBUG ?: "")
        }
        master {
            // TODO: look into this build variant, is it really needed?
            initWith debug
            applicationIdSuffix '.master'
            matchingFallbacks = ['debug']
            resValue("string", "firebase_app_id", FIREBASE_APP_ID_MASTER ?: "")
        }
        release {
            initWith debug
            applicationIdSuffix ''
            resValue("string", "firebase_app_id", FIREBASE_APP_ID ?: "")
        }
    }
    lint {
        disable 'WrongLayoutName',
                'LayoutFileNameMatchesClass',
                'MatchingViewId',
                'RawDimen',
                'WrongAnnotationOrder',
                'ColorCasing',
                'WrongViewIdFormat',
                'HardcodedText'
    }
    namespace 'com.glia.exampleapp'
}

def initEnvProperty(String propertyName) {
    if (!project.hasProperty(propertyName)) {
        ext[propertyName] = System.getenv(propertyName) as String ?: "UNDEFINED"
    }
}

dependencies {
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.navigation:navigation-fragment:$navVersion"
    implementation "androidx.navigation:navigation-ui:$navVersion"
    implementation "androidx.preference:preference:$preferenceVersion"
    implementation platform("com.google.firebase:firebase-bom:$firebaseVersion")
    implementation "com.google.firebase:firebase-messaging"
    implementation project(path: ':widgetssdk')
    implementation "androidx.core:core-ktx:$coreKtxVersion"

    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$testLibraryVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
}
