/**
 * README!
 *
 * Using the Core SDK directly allows you to build the Widgets SDK testing application
 * with the Core SDK sources instead of the released version.
 *
 * If you want to use the Core SDK directly, you need to set
 * the `dependency.coreSdk.useDirect` to `true` in the `local.properties` or `$CORE_SDK_USE_DIRECT` environment variable
 * It will use the Default Core SDK path ("../android-sdk") if it is not set.
 * If you want to use a custom path, you can set it in the `local.properties`
 * by adding the `dependency.coreSdk.path` property.
 * Or you can provide the path via the `$CORE_SDK_PATH` environment variable.
 *
 * Pay attention: only default build types (debug, release) are supported for direct Core SDK usage.
 * If you want to build custom build types (like the snapshot), you need to publish the Core SDK
 * to the local maven repository.
 * You can do it by running the `:widgetssdk:publishCoreSdkToLocalMaven` task.
 */

def projectDir = hasProperty('widgetsSdkProjectDir') ? widgetsSdkProjectDir : rootProject.projectDir.absolutePath

ext {
  localPropertiesFilePath = "$projectDir/local.properties"
  gradlePropertiesFilePath = "$projectDir/gradle.properties"
  gliaCoreSdkUseDirectTag = 'gliaCoreSdkUseDirect'
  gliaCoreSdkUseDirectTagInProperties = 'dependency.coreSdk.useDirect'
  gliaCoreSdkPathExistsTag = 'gliaCoreSdkPathExists'
  gliaCoreSdkPathTag = 'gliaCoreSdkPath'
  gliaCoreSdkPathTagInProperties = 'dependency.coreSdk.path'
  gliaCoreSdkDefaultPath = "$projectDir/../android-sdk"
  gliaCoreSdkUseDirectInEnv = 'CORE_SDK_USE_DIRECT'
  gliaCoreSdkPathEnv = 'CORE_SDK_PATH'

  gliaCoreSdkDirectVersionPropertiesFileRelatedPath = 'androidSdk/version.properties'
  gliaCoreSdkDirectVersionTag = 'gliaCoreSdkDirectVersion'
  gliaCoreSdkDirectVersionTagInProperties = 'version.name'

  gliaCoreSdkDirectPathVersion = 'direct_core_localPath'

  gliaTelemetrySdkScriptRelatedPath = "scripts/direct-telemetry.gradle"
  gliaTelemetrySdkDirectPathVersionTag = 'gliaTelemetrySdkDirectPathVersion'

  telemetrySdkVersion = { String defaultVersion ->
    // If the Telemetry SDK is applied the function will be overridden in the telemetry script.
    return defaultVersion
  }

  coreSdkDebugVersion = { String defaultVersion ->
    if (gliaCoreSdkUseDirect && gliaCoreSdkPathExists) {
      return gliaCoreSdkDirectPathVersion
    } else {
      return defaultVersion
    }
  }

  coreSdkSnapshotVersion = { String defaultVersion ->
    if (gliaCoreSdkUseDirect && gliaCoreSdkPathExists) {
      return "${gliaCoreSdkDirectVersion}-SNAPSHOT"
    } else {
      return defaultVersion
    }
  }
}

readConfiguration(projectDir)
exposeDirectCoreSdkVersion()
applyDirectTelemetryScriptIfPossible()

private def readConfiguration(String projectDir) {
  Boolean gliaCoreSdkUseDirect = false
  Boolean gliaCoreSdkUseDirectFromLocalProperties = null
  Boolean gliaCoreSdkUseDirectInEnv = System.getenv(gliaCoreSdkUseDirectInEnv) as Boolean
  String coreSdkPath = null
  String coreSdkPathEnv = System.getenv(gliaCoreSdkPathEnv) as String
  String coreSdkDefaultPath = null

  File localPropertiesFile = file(localPropertiesFilePath)
  if (localPropertiesFile.exists()) {
    Properties properties = new Properties()
    new FileInputStream(localPropertiesFile).withCloseable { is -> properties.load(is) }
    if (properties.containsKey(gliaCoreSdkUseDirectTagInProperties)) {
      gliaCoreSdkUseDirectFromLocalProperties = Boolean.parseBoolean(properties[gliaCoreSdkUseDirectTagInProperties])
    }
    if (properties.containsKey(gliaCoreSdkPathTagInProperties)) {
      coreSdkPath = properties[gliaCoreSdkPathTagInProperties]
    }
  }

  if (coreSdkPath) {
    coreSdkPath = absolutePath(projectDir, coreSdkPath)
  } else if (coreSdkPathEnv) {
    coreSdkPathEnv = absolutePath(projectDir, coreSdkPathEnv)
  } else {
    coreSdkDefaultPath = gliaCoreSdkDefaultPath
  }

  if (gliaCoreSdkUseDirectFromLocalProperties != null) {
    gliaCoreSdkUseDirect = gliaCoreSdkUseDirectFromLocalProperties
  } else if (gliaCoreSdkUseDirectInEnv != null) {
    gliaCoreSdkUseDirect = gliaCoreSdkUseDirectInEnv
  }

  String sdkPath = coreSdkPath ?: coreSdkPathEnv ?: coreSdkDefaultPath
  Boolean sdkPathExists = sdkPath != null && file(sdkPath).exists()

  ext[gliaCoreSdkUseDirectTag] = gliaCoreSdkUseDirect
  ext[gliaCoreSdkPathExistsTag] = sdkPathExists
  ext[gliaCoreSdkPathTag] = sdkPath

  printDirectCoreSdkInfo(gliaCoreSdkUseDirectFromLocalProperties, gliaCoreSdkUseDirectInEnv, coreSdkPath, coreSdkPathEnv, coreSdkDefaultPath)
}

private def exposeDirectCoreSdkVersion() {
  String coreSdkVersion = null
  def sdkPath = gliaCoreSdkPath
  if (sdkPath) {
    String versionPropertiesPath = "$sdkPath/$gliaCoreSdkDirectVersionPropertiesFileRelatedPath"
    File propertiesFile = file(versionPropertiesPath)
    if (propertiesFile.exists()) {
      Properties properties = new Properties()
      new FileInputStream(propertiesFile).withCloseable { is -> properties.load(is) }
      if (properties.containsKey(gliaCoreSdkDirectVersionTagInProperties)) {
        coreSdkVersion = properties[gliaCoreSdkDirectVersionTagInProperties]
      }
    }
  }

  ext[gliaCoreSdkDirectVersionTag] = coreSdkVersion
}

private def applyDirectTelemetryScriptIfPossible() {
  if (gliaCoreSdkUseDirect && gliaCoreSdkPathExists) {
    String scriptPath = "$gliaCoreSdkPath/$gliaTelemetrySdkScriptRelatedPath"
    if (file(scriptPath).exists()) {
      ext.coreSdkProjectDir = gliaCoreSdkPath
      apply from: scriptPath
    }
  }
}

private static def absolutePath(String projectDir, String path) {
  if (path.startsWith('/')) {
    return path
  }
  return new File(projectDir, path).canonicalPath
}

private def printDirectCoreSdkInfo(Boolean useDirectFromLocalProperties, Boolean useDirectInEnv, String coreSdkPath, String coreSdkPathEnv, String coreSdkDefaultPath) {
  def printDetails = hasProperty('directCorePrintDetails') ? directCorePrintDetails : false
  if (!printDetails || gradle.startParameter.logLevel == LogLevel.QUIET) {
    return
  }

  println("\n\u001B[35m\u001B[1m----------------------Direct Core SDK-----------------------\u001B[0m")
  if (gliaCoreSdkUseDirect) {
    if (!gliaCoreSdkPathExists) {
      println("\u001B[31mThe project is configured to use the Core SDK directly, but the provided path does not exist!\u001B[0m\n")
    } else {
      println("\u001B[32mThe project is configured to use the Core SDK directly!\u001B[0m")
    }
    printDirectCoreSdkPathInfo(coreSdkPath, coreSdkPathEnv, coreSdkDefaultPath)
  } else {
    println(
      "\u001B[33mThe project is NOT configured to use the Core SDK from the direct path!\u001B[0m\n" +
        "If you want to use the Core SDK directly, add the \"$gliaCoreSdkUseDirectTagInProperties=true\" to the local.properties " +
        "or \$$gliaCoreSdkUseDirectInEnv environment variable."
    )
  }
  if (useDirectFromLocalProperties != null) {
    println("\nThe feature was set to $useDirectFromLocalProperties using \"$gliaCoreSdkUseDirectTagInProperties\" from local.properties.")
  } else if (useDirectInEnv != null) {
    println("\nThe feature was set to $useDirectInEnv using \$$gliaCoreSdkUseDirectInEnv environment variable.")
  }
  if (useDirectFromLocalProperties != null && useDirectInEnv != null) {
    println("\u001B[1mPay Attention:\u001B[0m The local.properties overrides the $useDirectInEnv environment variable.")
  }
  println("\u001B[35m\u001B[1m----------------------Direct Core SDK-----------------------\u001B[0m\n")
}

private void printDirectCoreSdkPathInfo(String coreSdkPath, String coreSdkPathEnv, String coreSdkDefaultPath) {
  if (coreSdkPath) {
    println("Core SDK path: $coreSdkPath (set by \"$gliaCoreSdkPathTagInProperties\" from the local.properties)")
  } else if (coreSdkPathEnv) {
    println("Core SDK path: $coreSdkPathEnv (set from \$$gliaCoreSdkPathEnv environment variable)")
  } else {
    println(
      "No Core SDK path is set!\n" +
        "You can set it in the local.properties using the \"$gliaCoreSdkPathTagInProperties\" " +
        "or provide it via the \$$gliaCoreSdkPathEnv environment variable.\n" +
        "\nIf you don't want to use the Core SDK directly, " +
        "set the \"$gliaCoreSdkUseDirectTagInProperties\" in the local.properties to false."
    )
    if (gliaCoreSdkPathExists) {
      println("\nCore SDK path: $coreSdkDefaultPath (default path is used)")
    }
  }
}
