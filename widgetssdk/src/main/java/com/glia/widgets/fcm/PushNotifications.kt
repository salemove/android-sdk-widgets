package com.glia.widgets.fcm

import android.content.Context
import com.glia.telemetry_lib.GliaLogger
import com.glia.telemetry_lib.SDK_TYPE
import com.glia.widgets.push.notifications.SecureMessagingPushController
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage
import com.glia.androidsdk.fcm.PushNotifications as CorePushNotifications

/**
 * Interface for push notifications handling.
 *
 * This interface is used to handle push notifications in the Glia SDK.
 *
 * @see [GliaFcmService]
 */
interface PushNotifications {

    /**
     * Allows to configure the push notifications that the SDK will subscribe to.
     *
     *
     * If the notifications aren't configured, by default the SDK subscribes to the following push notifications:
     *
     *  * [PushNotificationType.START]
     *  * [PushNotificationType.MESSAGE]
     *  * [PushNotificationType.TRANSFER]
     *
     *
     *
     * Ensure that you call this method after [com.glia.widgets.GliaWidgets.init], and before starting an engagement.
     * Calling this method after creating an engagement will only enable push notifications
     * for subsequent engagements.
     *
     * @param events - Collection of [PushNotificationEvent] to subscribe to
     */
    fun subscribeTo(events: Collection<PushNotificationEvent>)

    /**
     * Allows to configure the push notifications that the SDK will subscribe to.
     *
     *
     * The same as the [.subscribeTo(Collection)] method
     * but allows to set the push notifications type with default messages.
     *
     * @param context - Application context
     * @param types - Collection of [PushNotificationType] to subscribe to
     */
    fun subscribeTo(context: Context, types: Collection<PushNotificationType>)

    /**
     * Returns push notification events that the SDK is subscribed to.
     *
     * @return collection of [PushNotificationEvent]
     */
    fun getPushEvents(): Set<PushNotificationEvent>

    /**
     * This method should be called when a new token is generated by the Firebase Cloud Messaging framework.
     *
     * You should use this method only if you have your own FCM service.
     *
     * @see GliaFcmService
     *
     * @param newFcmToken New FCM token
     */
    fun updateFcmToken(newFcmToken: String?)

    /**
     * Should be called when a new remote message is received from the Firebase Cloud Messaging framework.
     *
     * You should use this method only if you have your own FCM service.
     *
     * @see GliaFcmService
     *
     * @param remoteMessage - New FCM message
     * @param service - FCM service
     */
    fun onNewMessage(service: FirebaseMessagingService, remoteMessage: RemoteMessage)
}

// Push notification key for the queue ID
private const val QUEUE_ID_KEY = "queue_id"

// Push notification key for the visitor ID
private const val VISITOR_ID_KEY = "visitor_id"

// Push notification key for the body
private const val BODY_KEY = "body"

// Push notification key for the event type
private const val EVENT_TYPE_KEY = "event_type"

// Push notification event type for secure messaging
private const val SECURE_MESSAGING_TYPE = "engagement.secure_conversation.message"

internal class PushNotificationsImpl(
    private val corePushNotifications: CorePushNotifications,
    private val secureMessagingPushController: SecureMessagingPushController
) : PushNotifications {
    override fun subscribeTo(events: Collection<PushNotificationEvent>) {
        GliaLogger.logMethodUse(PushNotifications::class, "subscribeTo", "eventsList")
        corePushNotifications.subscribeTo(events.toCoreType())
    }

    override fun subscribeTo(context: Context, types: Collection<PushNotificationType>) {
        GliaLogger.logMethodUse(PushNotifications::class, "subscribeTo", "context", "typeList")
        corePushNotifications.subscribeTo(context, types.toCoreType())
    }

    override fun getPushEvents(): Set<PushNotificationEvent> {
        GliaLogger.logMethodUse(PushNotifications::class, "getPushEvents")
        return corePushNotifications.pushEvents.toWidgetsType().toSet()
    }

    override fun updateFcmToken(newFcmToken: String?) {
        GliaLogger.logMethodUse(PushNotifications::class, "updateFcmToken")
        corePushNotifications.updateFcmToken(newFcmToken)
    }

    override fun onNewMessage(service: FirebaseMessagingService, remoteMessage: RemoteMessage) = with(remoteMessage) {
        GliaLogger.logMethodUse(PushNotifications::class, "onNewMessage")
        if (data[EVENT_TYPE_KEY] == SECURE_MESSAGING_TYPE) {
            // This message must be handled internally, so we don't need to pass it to the core's push notifications
            secureMessagingPushController.handleSecureMessage(
                service,
                data[QUEUE_ID_KEY],
                data[BODY_KEY].orEmpty(),
                data[VISITOR_ID_KEY] ?: return@with // Visitor ID is required, otherwise it is unclear if the message is for the current user
            )
        } else {
            corePushNotifications.onNewMessage(this)
        }
    }

}
