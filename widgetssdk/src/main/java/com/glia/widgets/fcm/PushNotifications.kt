package com.glia.widgets.fcm

import android.content.Context
import com.google.firebase.messaging.RemoteMessage

/**
 * Interface for push notifications handling.
 *
 * This interface is used to handle push notifications in the Glia SDK.
 *
 * @see [GliaFcmService]
 */
interface PushNotifications {

    /**
     * Allows to configure the push notifications that the SDK will subscribe to.
     *
     *
     * If the notifications aren't configured, by default the SDK subscribes to the following push notifications:
     *
     *  * [PushNotificationType.START]
     *  * [PushNotificationType.MESSAGE]
     *  * [PushNotificationType.TRANSFER]
     *
     *
     *
     * Ensure that you call this method after [com.glia.widgets.GliaWidgets.init], and before starting an engagement.
     * Calling this method after creating an engagement will only enable push notifications
     * for subsequent engagements.
     *
     * @param events - Collection of [PushNotificationEvent] to subscribe to
     */
    fun subscribeTo(events: Collection<PushNotificationEvent>)

    /**
     * Allows to configure the push notifications that the SDK will subscribe to.
     *
     *
     * The same as the [.subscribeTo(Collection)] method
     * but allows to set the push notifications type with default messages.
     *
     * @param context - Application context
     * @param types - Collection of [PushNotificationType] to subscribe to
     */
    fun subscribeTo(context: Context, types: Collection<PushNotificationType>)

    /**
     * Returns push notification events that the SDK is subscribed to.
     *
     * @return collection of [PushNotificationEvent]
     */
    fun getPushEvents(): Set<PushNotificationEvent>

    /**
     * This method should be called when a new token is generated by the Firebase Cloud Messaging framework.
     *
     * You should use this method only if you have your own FCM service.
     *
     * @see GliaFcmService
     *
     * @param newFcmToken New FCM token
     */
    fun updateFcmToken(newFcmToken: String?)

    /**
     * Should be called when a new remote message is received from the Firebase Cloud Messaging framework.
     *
     * You should use this method only if you have your own FCM service.
     *
     * @see GliaFcmService
     *
     * @param message - New FCM message
     */
    fun onNewMessage(message: RemoteMessage)
}

internal class PushNotificationsImpl(
    private val pushNotifications: com.glia.androidsdk.fcm.PushNotifications
) : PushNotifications {
    override fun subscribeTo(events: Collection<PushNotificationEvent>) {
        pushNotifications.subscribeTo(events.toCoreType())
    }

    override fun subscribeTo(context: Context, types: Collection<PushNotificationType>) {
        pushNotifications.subscribeTo(context, types.toCoreType())
    }

    override fun getPushEvents(): Set<PushNotificationEvent> {
        return pushNotifications.pushEvents.toWidgetsType().toSet()
    }

    override fun updateFcmToken(newFcmToken: String?) {
        pushNotifications.updateFcmToken(newFcmToken)
    }

    override fun onNewMessage(message: RemoteMessage) {
        pushNotifications.onNewMessage(message)
    }
}
