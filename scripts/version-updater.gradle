/**
 * This build script is responsible for reading and updating the project related versions for integration with CI/CD flows
 */

ext {
    gradlePropertiesFilePath = "${rootProject.projectDir}/version.properties"
    gliaCoreSdkVersionTagInProperties = 'dependency.coreSdk.version'
    gliaCoreSdkVersionTag = 'gliaSdkVersion'
    wdigetsVersionNameTagInProperties = 'widgets.versionName'
    wdigetsVersionNameTag = 'widgetsVersionName'
    wdigetsVersionCodeTagInProperties = 'widgets.versionCode'
    wdigetsVersionCodeTag = 'widgetsVersionCode'
}

exposeGradlePropertiesToBuildScripts()

def exposeGradlePropertiesToBuildScripts() {
    Properties gradleProperties = PropertiesIO.readProperties(gradlePropertiesFilePath)
    ext[gliaCoreSdkVersionTag] = gradleProperties.getProperty(gliaCoreSdkVersionTagInProperties)
    ext[wdigetsVersionNameTag] = gradleProperties.getProperty(wdigetsVersionNameTagInProperties)
    ext[wdigetsVersionCodeTag] = Integer.parseInt(gradleProperties.getProperty(wdigetsVersionCodeTagInProperties))
}

/**
 * This class is responsible to reading and writing Property files
 */
class PropertiesIO {
    static Properties readProperties(String propertiesFilePath) {
        File gradlePropsFile = new File(propertiesFilePath)
        Properties gradleProperties = new Properties()
        gradleProperties.load(new FileInputStream(gradlePropsFile))
        return gradleProperties
    }

    static void saveProperties(Properties properties, String propertiesFilePath) {
        File gradlePropsFile = new File(propertiesFilePath)
        properties.store(gradlePropsFile.newWriter(), null)
    }
}

class VersionPropertiesTask extends DefaultTask {
    void saveProperty(String propertyName, String propertyValue) {
        Properties gradleProperties = PropertiesIO.readProperties(getProject().gradlePropertiesFilePath)
        gradleProperties[propertyName] = propertyValue
        PropertiesIO.saveProperties(gradleProperties, getProject().gradlePropertiesFilePath)
    }
}

/**
 * A task class for editing the Core SDK version in version.properties
 * Example of usage from terminal:
 * ./gradlew saveCoreSdkVersion --coreSdkVersion=0.77.2
 */
class UpdateCoreSdkVersion extends VersionPropertiesTask {
    private String newCoreSdkVersion

    @Option(option = "coreSdkVersion", description = "Core SDK version that should be overriden in configuration files")
    void setCoreSdkVersion(String coreSdkVersion) {
        this.newCoreSdkVersion = coreSdkVersion
    }

    @TaskAction
    void write() {
        saveProperty(getProject().gliaCoreSdkVersionTagInProperties, newCoreSdkVersion)
    }
}

/**
 * A task class for editing the Widget SDK version in version.properties
 * Example of usage from terminal:
 * ./gradlew saveWidgetsVersionName --versionCode=77 --versionName=0.77.2
 */
class UpdateProjectVersion extends VersionPropertiesTask {
    private String versionName
    private String versionCode

    @Option(option = "versionName", description = "Widget SDK version name that should be overriden in configuration files")
    void setVersionName(String versionName) {
        this.versionName = versionName
    }

    @Option(option = "versionCode", description = "Widget SDK version code that should be overriden in configuration files")
    void setVersionCode(String versionCode) {
        this.versionCode = versionCode
    }

    @TaskAction
    void write() {
        saveProperty(getProject().wdigetsVersionNameTagInProperties, versionName)
        saveProperty(getProject().wdigetsVersionCodeTagInProperties, versionCode)
    }
}

tasks.register('saveCoreSdkVersion', UpdateCoreSdkVersion)
tasks.register('saveWidgetsVersionName', UpdateProjectVersion)

